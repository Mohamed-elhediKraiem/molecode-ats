import { PrismaClient } from "@prisma/client";
import { currentUser } from "@clerk/nextjs/server"; // ‚úÖ Import Clerk

const prisma = new PrismaClient();

export async function GET(req: Request) {
  try {
    // ‚úÖ V√©rification de l'utilisateur connect√©
    const user = await currentUser();
    if (!user) {
      return new Response(
        JSON.stringify({ error: "Non autoris√© ‚Äî utilisateur non connect√©." }),
        { status: 401 }
      );
    }

    const userId = user.id; // Identifiant unique Clerk

    // üîç R√©cup√©ration des filtres depuis l'URL
    const { searchParams } = new URL(req.url);
    const title = (searchParams.get("title") || "").toLowerCase();
    const society = (searchParams.get("society") || "").toLowerCase();
    const date = searchParams.get("date") || "";
    const status = (searchParams.get("status") || "").toLowerCase();

    // üß© Construction dynamique du filtre Prisma (filtrage c√¥t√© base)
    const where: any = { userId }; // üîí On limite aux posts de l‚Äôutilisateur connect√©

    if (title) where.title = { contains: title };
    if (society) where.society = { contains: society };
    if (status) where.status = status;
    if (date) where.creationDate = new Date(date);

    // üì¶ R√©cup√©ration des posts filtr√©s directement via Prisma
    const posts = await prisma.post.findMany({ where });

    // üìä Calcul des KPI sur les r√©sultats filtr√©s
    const total = posts.length;
    const enAttente = posts.filter(
      (p) => p.status?.toLowerCase() === "en attente"
    ).length;
    const accepte = posts.filter(
      (p) => p.status?.toLowerCase() === "accept√©"
    ).length;
    const refuse = posts.filter((p) =>
      ["refus", "refus√©"].includes(p.status?.toLowerCase())
    ).length;

    // ‚úÖ R√©ponse JSON structur√©e
    return Response.json({ total, enAttente, accepte, refuse });
  } catch (error) {
    console.error("‚ùå Erreur GET /api/posts/stats :", error);
    return new Response(
      JSON.stringify({ error: "Erreur serveur interne." }),
      { status: 500 }
    );
  }
}
